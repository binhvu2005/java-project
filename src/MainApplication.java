
import ra.edu.business.model.account.Account;
import ra.edu.business.model.account.AccountRole;
import ra.edu.business.model.account.AccountStatus;
import ra.edu.business.model.candidate.CandidateGender;
import ra.edu.business.service.login.LoginSevice;
import ra.edu.business.service.login.LoginSeviceImp;
import ra.edu.presentation.admin.AdminMain;
import ra.edu.presentation.candidate.CandidateMain;
import ra.edu.validate.Validator;

import java.io.*;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Scanner;
import java.util.concurrent.TimeUnit;

public class MainApplication {
    static Scanner scanner = new Scanner(System.in);
    static final String TOKEN_FILE = "login_token.txt";
    private static final SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");

    public static void main(String[] args) throws Exception {
        // ki·ªÉm tr xem ƒë√£ ƒëang nh·∫≠p hay ch∆∞a
        File tokenFile = new File(TOKEN_FILE);
        if (tokenFile.exists()) {
            try (BufferedReader reader = new BufferedReader(new FileReader(tokenFile))) {
                String tokenLine = reader.readLine();
                System.out.println("Token: " + tokenLine);
                if (tokenLine != null && !tokenLine.isBlank()) {
                   if (tokenLine.equals("0")) {
                        System.out.println("‚ö†Ô∏è B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p. Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ ti·∫øp t·ª•c.");
                    } else {
                        int token = Integer.parseInt(tokenLine);
                        LoginSevice loginService = new LoginSeviceImp();
                        AccountRole role = loginService.getRole(token);
                        if (role == AccountRole.ADMIN) {
                            System.out.println("‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng v·ªõi quy·ªÅn Admin!");
                            AdminMain.run();

                        } else if (role == AccountRole.CANDIDATE) {
                            System.out.println("‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng v·ªõi quy·ªÅn ·ª®ng vi√™n!");
                            CandidateMain.run();
                        }
                    }
                }
            } catch (IOException e) {
                System.out.println("‚ö†Ô∏è Kh√¥ng th·ªÉ ƒë·ªçc file token: " + e.getMessage());
            } catch (NumberFormatException e) {
                System.out.println("‚ö†Ô∏è Token kh√¥ng h·ª£p l·ªá, c·∫ßn l√† s·ªë nguy√™n.");
            }
        }


        while (true) {
            System.out.println("\n============= MENU =============");
            System.out.println("1. ƒêƒÉng nh·∫≠p");
            System.out.println("2. ƒêƒÉng k√Ω (·ª®ng vi√™n)");
            System.out.println("3. Tho√°t");
            System.out.print("Ch·ªçn ch·ª©c nƒÉng (1-3): ");

            int choice;
            try {
                choice = Integer.parseInt(scanner.nextLine());
            } catch (NumberFormatException e) {
                System.out.println("‚ö†Ô∏è L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p s·ªë t·ª´ 1 ƒë·∫øn 3.");
                continue;
            }

            switch (choice) {
                case 1:
                    login();
                    break;
                case 2:
                    registerCandidate();
                    break;
                case 3:
                    System.out.println("üëã C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng h·ªá th·ªëng. T·∫°m bi·ªát!");
                    System.exit(0);
                default:
                    System.out.println("‚ö†Ô∏è L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i.");
            }
        }
    }

    private static void login() throws Exception {
        System.out.println("\n=== ƒêƒÇNG NH·∫¨P H·ªÜ TH·ªêNG ===");
        System.out.print("Nh·∫≠p Email ƒëƒÉng nh·∫≠p: ");
        String email = scanner.nextLine();
        System.out.print("Nh·∫≠p m·∫≠t kh·∫©u: ");
        String password = scanner.nextLine();
        System.out.println("\nƒêang x·ª≠ l√Ω...");
        TimeUnit.SECONDS.sleep(randomDelay());
        LoginSevice loginService = new LoginSeviceImp();
        loginService.registerAdmin();
        Account account = loginService.login(email, password);
        if (account != null) {
            if (account.getStatus()== AccountStatus.INACTIVE) {
                System.out.println("‚ö†Ô∏è T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã kh√≥a. Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n.");
            }else {
                System.out.println("‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng!");
                saveToken(account.getId());
                if (account.getRole() == AccountRole.ADMIN) {
                    AdminMain.run();
                } else if (account.getRole() == AccountRole.CANDIDATE) {
                    CandidateMain.run();
                }
            }
        } else {
            System.out.println("‚ùå Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng.");
        }
    }

    private static void registerCandidate() throws Exception {
        System.out.println("\n=== ƒêƒÇNG K√ù ·ª®NG VI√äN ===");

        String name, email, phone, genderStr, description, password, confirmPassword;
        Date dob;
        int experience;
        CandidateGender gender;

        // T√™n
        while (true) {
            System.out.print("Nh·∫≠p t√™n: ");
            name = scanner.nextLine();
            if (Validator.isValidLength(name)) break;
            System.out.println("‚ö†Ô∏è T√™n ph·∫£i c√≥ t·ª´ 10 ƒë·∫øn 100 k√Ω t·ª±.");
        }

        // Email
        while (true) {
            System.out.print("Nh·∫≠p email: ");
            email = scanner.nextLine();
            if (Validator.isValidEmail(email)) break;
            System.out.println("‚ö†Ô∏è Email kh√¥ng h·ª£p l·ªá.");
        }

        // SƒêT
        while (true) {
            System.out.print("Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i: ");
            phone = scanner.nextLine();
            if (Validator.isValidPhone(phone)) break;
            System.out.println("‚ö†Ô∏è S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá.");
        }

        // Gi·ªõi t√≠nh
        while (true) {
            System.out.print("Nh·∫≠p gi·ªõi t√≠nh (Male/Female/Other): ");
            genderStr = scanner.nextLine().trim().toUpperCase();
            if (Validator.isValidGender(genderStr)) {
                gender = CandidateGender.valueOf(genderStr);
                break;
            }
            System.out.println("‚ö†Ô∏è Gi·ªõi t√≠nh kh√¥ng h·ª£p l·ªá.");
        }

        // Ng√†y sinh
        while (true) {
            System.out.print("Nh·∫≠p ng√†y sinh (dd/MM/yyyy): ");
            String dobStr = scanner.nextLine();
            try {
                dob = sdf.parse(dobStr);
                if (Validator.isNotNullDate(dob)) break;
            } catch (Exception e) {
                System.out.println("‚ö†Ô∏è Ng√†y sinh kh√¥ng h·ª£p l·ªá.");
            }
        }
        // Kinh nghi·ªám
        while (true) {
            System.out.print("Nh·∫≠p s·ªë nƒÉm kinh nghi·ªám (0-100): ");
            String experienceStr = scanner.nextLine();
            try {
                experience = Integer.parseInt(experienceStr);
                if (Validator.isValidExperience(experience)) {
                    break;
                }
            } catch (NumberFormatException e) {
                System.out.println("‚ö†Ô∏è Kinh nghi·ªám kh√¥ng h·ª£p l·ªá.");
            }
        }

        // M√¥ t·∫£
        while (true) {
            System.out.print("Nh·∫≠p m√¥ t·∫£ b·∫£n th√¢n: ");
            description = scanner.nextLine();
            if (Validator.isValidLength(description)) break;
            System.out.println("‚ö†Ô∏è M√¥ t·∫£ ph·∫£i t·ª´ 10 ƒë·∫øn 100 k√Ω t·ª±.");
        }

        // M·∫≠t kh·∫©u
        while (true) {
            System.out.print("Nh·∫≠p m·∫≠t kh·∫©u (‚â• 6 k√Ω t·ª±): ");
            password = scanner.nextLine();
            if (password.length() < 6) {
                System.out.println("‚ö†Ô∏è M·∫≠t kh·∫©u qu√° ng·∫Øn.");
                continue;
            }

            System.out.print("X√°c nh·∫≠n m·∫≠t kh·∫©u: ");
            confirmPassword = scanner.nextLine();
            if (!password.equals(confirmPassword)) {
                System.out.println("‚ö†Ô∏è M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp.");
                continue;
            }
            break;
        }

        System.out.println("\nƒêang x·ª≠ l√Ω...");
        TimeUnit.SECONDS.sleep(randomDelay());

        LoginSevice service = new LoginSeviceImp();
        service.registerCandidate(name, email, phone, gender, new java.sql.Date(dob.getTime()),experience, description, password);

    }

    static void saveToken(Integer id) {
        if (id == null || id <= 0) {
            System.out.println("‚ö†Ô∏è ID kh√¥ng h·ª£p l·ªá, kh√¥ng th·ªÉ l∆∞u token.");
            return;
        }

        try (FileWriter writer = new FileWriter(TOKEN_FILE)) {
            writer.write(String.valueOf(id));
        } catch (IOException e) {
            System.out.println("‚ö†Ô∏è Kh√¥ng th·ªÉ l∆∞u token ƒëƒÉng nh·∫≠p.");
        }
    }


    static int randomDelay() {
        return new java.util.Random().nextInt(2) + 1;
    }
}
